<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.3.7.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.leo.spring.cloud</groupId>
	<artifactId>Docker-SpringCloudNetflix-ZuulService</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>Docker-SpringCloudNetflix-ZuulService</name>
	<description>Dockerized Spring Cloud Zuul service for API gateway</description>
	
	<properties>
		<java.version>11</java.version>
		<spring-cloud.version>Hoxton.SR9</spring-cloud.version>
		<rate.limit.version>2.4.2.RELEASE</rate.limit.version>
	</properties>
	
	<dependencies>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-zuul</artifactId>
		</dependency>
		<!-- these 3 for gateway rate limiting -->
		<dependency>
            <groupId>com.marcosbarbero.cloud</groupId>
            <artifactId>spring-cloud-zuul-ratelimit</artifactId>
            <version>${rate.limit.version}</version>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>
		
		<!-- Actuator is mainly used to expose operational information about the running application — health, metrics, info, dump, env, etc.
			It also requires spring-boot-starter-web to expose them via http (JMX beans is the other way) 
			SpringBoot 2.x version now supports the CRUD model as opposed to the old read/write model.
			https://www.baeldung.com/spring-boot-actuators
		-->
		<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.junit.vintage</groupId>
					<artifactId>junit-vintage-engine</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
		    <groupId>junit</groupId>
		    <artifactId>junit</artifactId>
		    <scope>test</scope>
		</dependency>
		
	</dependencies>
	
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<!--<finalName>spring-zuul-rate-limiting</finalName> final .jar file name -->
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<!-- to add build info to /actuator/info endpoint -->
				<executions>
					<execution>
						<goals>
							<goal>build-info</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- to add git info to properties file, queriable through /actuator/info path
			https://www.baeldung.com/spring-git-information -->
			<plugin>
				<groupId>pl.project13.maven</groupId>
				<artifactId>git-commit-id-plugin</artifactId>
				<executions>
					<execution>
						<id>get-the-git-infos</id>
						<goals>
							<goal>revision</goal>
						</goals>
					</execution>
					<execution>
						<id>validate-the-git-infos</id>
						<goals>
							<goal>validateRevision</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<!--
						- bastará esta configuración para que cree el git.properties
						- por defecto irá a buscar .git de este proyecto o en el padre
						- ya con esto funciona en el endpoint /actuator/info

						- otra opción es: include a git.properties file in the resources folder ourselves. We can include only the entries that we'll use in our project using placeholders like: git.branch=${git.branch} and the plugin will replace them for us. Note: Some IDEs don't work well with this plugin, and might throw a ‘circular placeholder reference' error on bootstrap!

						- Actuator integration: an included actuator endpoint extension, org.springframework.boot.actuate.info.GitInfoContributor, will pick git.properties file up if available. Then we can go to /actuator/info and it will show some of the properties.
						Si queremos extender y que muestre más, extendemos la ruta /info .. o creamos nuestro propio endpoint!
					-->
					<failOnNoGitDirectory>true</failOnNoGitDirectory>
					<!--<dotGitDirectory>${project.basedir}/submodule_directory/.git</dotGitDirectory>--><!--custom .git location-->
					<!--<generateGitPropertiesFile>false</generateGitPropertiesFile>-->
					<!--<generateGitPropertiesFilename>${project.build.outputDirectory}/filename.properties</generateGitPropertiesFilename>--><!--custom .properties file-->
					<prefix>git</prefix><!--custom properties prefix-->
					<verbose>true</verbose>
					<runOnlyOnce>true</runOnlyOnce><!--When working with project with submodules, setting this flag makes sure, that plugin works only for parent repository-->
					<excludeProperties>
						<!--<excludeProperty>git.user.*</excludeProperty>-->
					</excludeProperties>
					<includeOnlyProperties>    
						<!--<includeOnlyProperty>git.commit.id</includeOnlyProperty>-->
					</includeOnlyProperties>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
